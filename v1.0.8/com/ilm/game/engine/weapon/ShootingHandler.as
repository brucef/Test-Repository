package com.ilm.game.engine.weapon{	import flash.display.Sprite;	import flash.utils.Timer;	import flash.events.TimerEvent;	import com.ilm.game.engine.objects.GameObject;	import com.ilm.game.GameClient;	import com.ilm.game.content.Bullet;	import com.ilm.game.engine.objects.Ball;	public class ShootingHandler extends Sprite	{		private var gameClass:GameClient;		public function ShootingHandler(passedClient:GameClient):void		{			gameClass = passedClient;		}		public function fireWeapon(obj:GameObject):void		{			if (obj.weapon.reloadComplete == true) {				createBullet(obj);			}		}		private function createBullet(obj:GameObject):void		{			var trueAngle:Number = Math.atan2(mouseY - obj.y,mouseX - obj.x);			var trueStartX:Number = obj.x + ((obj.width / 2) + (obj.weapon.bulletDiameter / 2) + 10) * Math.cos(trueAngle);			var trueStartY:Number = obj.y + ((obj.width / 2) + (obj.weapon.bulletDiameter / 2) + 10) * Math.sin(trueAngle);			if (openSpace(trueStartX,trueStartY,obj)) {				for (var i = 0; i < obj.weapon.bulletNumber; i++) {					var randomNum:Number = ((Math.random() * obj.weapon.bulletOffset) - (obj.weapon.bulletOffset / 2)) / 50;					var offsetAngle:Number = trueAngle + randomNum;					var startX:Number = obj.x + 10 * Math.cos(offsetAngle);					var startY:Number = obj.y + 10 * Math.sin(offsetAngle);					var startVelX:Number = Math.cos(offsetAngle) * obj.weapon.bulletSpeed;					var startVelY:Number = Math.sin(offsetAngle) * obj.weapon.bulletSpeed;					var _bullet:Bullet = new Bullet(startX,startY,startVelX,startVelY,obj.weapon.bulletDiameter,obj.weapon.bulletMass);					gameClass.gameObjects.addChild(_bullet);				}				startReload(obj);			} else {				trace("object in the way of bullet");			}		}		private function openSpace($x:Number, $y:Number, obj:GameObject):Boolean		{			var spaceIsOpen = true;			for (var i = 0; i < gameClass.gameObjects.numChildren; i++) {				var tempObject:* = gameClass.gameObjects.getChildAt(i);				var distX:Number = Math.abs($x - tempObject.x);				var distY:Number = Math.abs($y - tempObject.y);				var distance:Number = Math.sqrt((distX * distX) + (distY * distY));				if (distance < (obj.weapon.bulletDiameter / 2) + (tempObject.width / 2)) {					spaceIsOpen = false;					break;				}			}			return spaceIsOpen;		}		private function startReload(obj:GameObject):void		{			//trace("started reload");			var wep:Object = obj.weapon;			wep.reloadComplete = false;			var reloadTimer:Timer = new Timer(obj.weapon.reloadTime,1);			reloadTimer.addEventListener(TimerEvent.TIMER,function(event:TimerEvent) {reloaded(wep);});			reloadTimer.start();		}		private function reloaded(wep:Object):void		{			//trace("finished reload");			wep.reloadComplete = true;		}		public function loadWeapon(weaponToLoad:Object,obj:GameObject):void		{			obj.weapon = weaponToLoad;		}	}}