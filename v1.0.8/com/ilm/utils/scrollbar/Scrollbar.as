package com.ilm.utils.scrollbar{	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;	public class Scrollbar extends Sprite	{		private var _content:Sprite;		private var _mask:Sprite;		private var _vslider:Sprite;		private var _hslider:Sprite;		private var _vtrack:Sprite;		private var _htrack:Sprite;		private var need:String = "none";		private var offsetX:Number;		private var offsetY:Number;		//this scrollbar class assumes that the content and the mask are already on the stage		public function Scrollbar(content:Sprite, mask:Sprite, verticalTrack:Sprite, horizontalTrack:Sprite, verticalSlider:Sprite, horizontalSlider:Sprite):void		{			this.addEventListener(Event.ADDED_TO_STAGE, init);			this._content = content;			this._mask = mask;			this._vslider = verticalSlider;			this._hslider = horizontalSlider;			this._vtrack = verticalTrack;			this._htrack = horizontalTrack;		}		private function init(event:Event):void		{			_content.mask = _mask;			this.x = _mask.x + _mask.width + 10;			this.y = _mask.y;			checkNeed();			if (need != "none") {				makeScrollbars();			}		}		private function makeScrollbars():void		{			if (need == "verticle" || need == "both") {				_vtrack.height = _mask.height;				_vslider.buttonMode = true;				this.addChild(_vtrack);				this.addChild(_vslider);				_vslider.addEventListener(MouseEvent.MOUSE_DOWN, VmouseDownHandler);			}			if (need == "horizontal" || need == "both") {				_htrack.width = _mask.width;				_htrack.y = _mask.height + 10;				_htrack.x = (_mask.width * -1) - 10;				_hslider.y = _mask.height + 10;				_hslider.x = (_mask.width * -1) - 10;				_hslider.buttonMode = true;				this.addChild(_htrack);				this.addChild(_hslider);				_hslider.addEventListener(MouseEvent.MOUSE_DOWN, HmouseDownHandler);			}		}		private function HmouseDownHandler(event:MouseEvent):void		{			offsetX = mouseX - _hslider.x;			stage.addEventListener(MouseEvent.MOUSE_MOVE, HmouseMoveHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, HmouseUpHandler);		}		private function HmouseUpHandler(event:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_MOVE, HmouseMoveHandler);			stage.removeEventListener(MouseEvent.MOUSE_UP, HmouseUpHandler);		}		private function HmouseMoveHandler(event:MouseEvent):void		{			_hslider.x = mouseX - offsetX;			if (_hslider.x < _htrack.x) {				_hslider.x = _htrack.x;			}			if (_hslider.x > _htrack.x + _htrack.width - _hslider.width) {				_hslider.x = _htrack.x + _htrack.width - _hslider.width;			}			var scrollPercent:Number = Math.abs(_hslider.x - _htrack.x) / (_htrack.width - _hslider.width);			_content.x = this.x - ((_content.width - _mask.width) * scrollPercent) - _mask.width - _hslider.width + 2;			event.updateAfterEvent();		}		private function VmouseUpHandler(event:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_MOVE, VmouseMoveHandler);			stage.removeEventListener(MouseEvent.MOUSE_UP, VmouseUpHandler);		}		private function VmouseMoveHandler(event:MouseEvent):void		{			_vslider.y = mouseY - offsetY;			if (_vslider.y < _vtrack.y) {				_vslider.y = _vtrack.y;			}			if (_vslider.y > _vtrack.y + _vtrack.height - _vslider.height) {				_vslider.y = _vtrack.y + _vtrack.height - _vslider.height;			}			var scrollPercent:Number = (_vslider.y - _vtrack.y) / (_vtrack.y + _vtrack.height - _vslider.height);			_content.y = this.y - ((_content.height - _mask.height) * scrollPercent);			event.updateAfterEvent();		}		private function VmouseDownHandler(event:MouseEvent):void		{			offsetY = mouseY - _vslider.y;			stage.addEventListener(MouseEvent.MOUSE_MOVE, VmouseMoveHandler);			stage.addEventListener(MouseEvent.MOUSE_UP, VmouseUpHandler);		}		private function checkNeed():void		{			var _tempNum:uint = 0;			if (_content.height > _mask.height) {				_tempNum += 1;			}			if (_content.width > _mask.width) {				_tempNum += 2;			}			switch (_tempNum) {				case 0:				need = "none";				break;				case 1:				need = "verticle";				break;				case 2:				need = "horizontal";				break;				case 3:				need = "both";				break;			}		}	}}